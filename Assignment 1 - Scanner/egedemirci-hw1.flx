%{
	#include <stdlib.h>
	#include <stdio.h>
	#include <string.h>
	#include <stdbool.h>	
%}

tIDENT \"[_a-zA-Z][_a-zA-Z0-9]*\"
tLBRAC \[
tNUM ([0-9]+\.[0-9]+)|(-[0-9]+\.[0-9]+)|([0-9]+)|(-[0-9]+)
tCOMMA \,
tPLUS \"\+\"
tGET \"\Get\"
tSET \"\Set\"
tFUNCTION \"\Function\"
tPRINT \"\Print\"
tFOR \"\For\"
tIF \"\If\"
tRETURN \"\Return\"
tMUL \"\*\"
tINC \"\+\+\"
tGT \"\>\"
tGEQ \"\>\=\"
tEQUALITY \"\=\=\"
tMINUS \"\-\"
tSTRING \'([^']*)\'
tDIV \"\/\"
tDEC \"\-\-\"
tRBRAC \]
tLT \"\<\"
tLEQ \"\<\=\"
 int lineNumber = 1;

%%

\n                      lineNumber++;
{tLBRAC}                printf("%d %s\n", lineNumber, "tLBRAC");
{tGET}               	printf("%d %s\n", lineNumber, "tGET");
{tSET}                  printf("%d %s\n", lineNumber, "tSET");
{tFUNCTION}             printf("%d %s\n", lineNumber, "tFUNCTION");
{tPRINT}                printf("%d %s\n", lineNumber, "tPRINT");
{tFOR}                  printf("%d %s\n", lineNumber, "tFOR");
{tIF}                   printf("%d %s\n", lineNumber, "tIF");
{tRETURN}               printf("%d %s\n", lineNumber, "tRETURN");
{tCOMMA}                printf("%d %s\n", lineNumber, "tCOMMA");
{tPLUS}                 printf("%d %s\n", lineNumber, "tPLUS");
{tMUL}                  printf("%d %s\n", lineNumber, "tMUL");
{tINC}                  printf("%d %s\n", lineNumber, "tINC");
{tGT}                   printf("%d %s\n", lineNumber, "tGT");
{tGEQ}                  printf("%d %s\n", lineNumber, "tGEQ");
{tEQUALITY}             printf("%d %s\n", lineNumber, "tEQUALITY");
{tMINUS}                printf("%d %s\n", lineNumber, "tMINUS");
{tDIV}                  printf("%d %s\n", lineNumber, "tDIV");
{tDEC}                  printf("%d %s\n", lineNumber, "tDEC");
{tRBRAC}                printf("%d %s\n", lineNumber, "tRBRAC");
{tLT}                   printf("%d %s\n", lineNumber, "tLT");
{tLEQ}                  printf("%d %s\n", lineNumber, "tLEQ");
{tIDENT}                {
						int counter = 0;
                        int size = yyleng;
                        char finalstring[size];
						finalstring[0] = '(';
                        int i = 1;
                        while(i < size){
						        if (yytext[i] == '\n'){
									counter ++;
								}
                                if (i == (size-1)){
                                        finalstring[i] = ')';

                                }
                                else{
                                        finalstring[i] = yytext[i];
                                }
                                i= i+1;
                    }
					finalstring[i] = '\0';
					printf("%d %s %s\n", lineNumber, "tIDENT", finalstring);
					lineNumber = lineNumber + counter;
					}
{tSTRING}       	{
						int counter = 0;
                        int size = yyleng;
                        char finalstring[size];
						finalstring[0] = '(';
                        int i = 1;
                        while(i < size){
						        if (yytext[i] == '\n'){
									counter ++;
								}
                                if (i == (size-1)){
                                        finalstring[i] = ')';

                                }
                                else{
                                        finalstring[i] = yytext[i];
                                }
                                i= i+1;
                        }
			finalstring[i] = '\0';
			printf("%d %s %s\n", lineNumber, "tSTRING", finalstring);
			lineNumber = lineNumber + counter;
			}

{tNUM}                  {
						int numsize = yyleng;
						char finalnum[numsize];
						int startidx = 0;
						int i = 0;
						bool seendot = false;
						if (yytext[0] == '-'){
								startidx = startidx + 1;
								i = i+1;
								finalnum[0] = '-';
						}
						while (startidx < numsize){
							if (yytext[startidx] != '0' && yytext[startidx] != '.'){
								while (startidx < numsize && yytext[startidx] != '.'){
									finalnum[i] = yytext[startidx];
									i = i+1;
									startidx = startidx + 1;
									if (yytext[startidx] == '.'){
										finalnum[i] = '.';
										i = i+1;
										seendot = true;
										break;
									}
								}
							}
							else if (yytext[startidx] == '.'){
								seendot = true;
								break;
							}

							if (seendot == false){
								startidx = startidx + 1;
							}
 						}
					if (seendot == true && finalnum[0] == '-' && i == 1){
						finalnum[i] = '0';
						finalnum [i+1] = '.';
						i = i + 2;
					}
					else if (seendot == true && i == 0){
						finalnum[i] = '0';
						finalnum [i+1] = '.';
						i = i+2;
					}
					else if (seendot == false && finalnum[0] == '-' && i == 1){
						finalnum[1] = '0';
						i = i + 1;
					}
					else if (seendot == false && i == 0){
						finalnum[0] = '0';
						i = i + 1;
					}
					int start = startidx + 1;
					int ending = numsize - 1;
 					while (ending > start){
						while (yytext[ending] == '0'){
							ending = ending - 1;
						}
						break;
					}
					while(start <= ending){
						finalnum[i] = yytext[start];
						start = start + 1;
						i = i + 1;
					}	
					if (finalnum[i-1] == '.'){
						finalnum[i] = '0';
						i = i+1;
					}

					finalnum[i] = '\0';
				
	                printf("%d %s (%s) (%s)\n", lineNumber, "tNUM", yytext, finalnum);}

\t
\r
\f
\v
" "
.  						printf("%d %s (%s)\n", lineNumber, "ILLEGAL CHARACTER", yytext);
%%

int main() {
	yylex();
	return(0);
}
